# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 80  # number of classes 类别数
depth_multiple: 0.33  # model depth multiple  控制模型的深度（BottleneckCSP数）C3
width_multiple: 0.50  # layer channel multiple  控制Conv通道个数（卷积核数量）
# depth_multiple表示BottleneckCSP模块的层缩放因子，将所有的BottleneckCSP模块的Bottleneck乘上该参数得到最终个数
# width_multiple表示卷积通道的缩放因子，就是将配置里的backbone和head部分有关Conv通道的设置，全部乘以该系数
# 通过这两个参数就可以实现不同复杂度的模型设计

anchors:
  - [10,13, 16,30, 33,23]  # P3/8 10*13 16*30 33*23 小目标
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32     大目标

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  # from列参数：当前模块输入来自哪一层输出；-1 代表是从上一层获得的输入
  # number列参数： 本模块重复次数；1表示只有1个，3表示3个相同的模块
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2  64*0.5=32 6：卷积核大小 2：padding 2：stride  变为原图大小1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4  128个卷积核，3*3卷积核大小，步长2  128*0.5=64
   [-1, 3, C3, [128]],          # BottleneckCSP 3*0.33=1
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 6, C3, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, C3, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024, 5]],  # 9
  ]

# YOLOv5 v6.0 head
# 没有分neck模块，所以head部分包含了PANet+Detect部分
head:
  [[-1, 1, Conv, [512, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4
   [-1, 3, C3, [512, False]],  # 13

   [-1, 1, Conv, [256, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)

   [-1, 1, Conv, [256, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)

   [-1, 1, Conv, [512, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
